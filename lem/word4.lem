(*
  Copyright 2016 Sami Mäkelä

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*)
open import Pervasives
open import Word

type word4 = W4 of bool * list bool
declare isabelle target_rep type word4 = `word` 4

(* perhaps should truncate here? *)
val bs_to_w4 : bitSequence -> word4
let bs_to_w4 seq = match resizeBitSeq (Just 4) seq with
 | BitSeq _ s b -> W4 s b
end
declare isabelle target_rep function bs_to_w4 = (fun w -> `word_of_int` (integerFromBitSeq w))

val w4_to_bs : word4 -> bitSequence
let w4_to_bs (W4 s b) = BitSeq (Just 4) s b

val word4BinTest : forall 'a. (bitSequence -> bitSequence -> 'a) -> word4 -> word4 -> 'a
let word4BinTest binop w1 w2 = binop (w4_to_bs w1) (w4_to_bs w2)

val word4BinOp : (bitSequence -> bitSequence -> bitSequence) -> word4 -> word4 -> word4
let word4BinOp binop w1 w2 = bs_to_w4 (binop (w4_to_bs w1) (w4_to_bs w2))

val word4NatOp : (bitSequence -> nat -> bitSequence) -> word4 -> nat -> word4
let word4NatOp binop w1 n = bs_to_w4 (binop (w4_to_bs w1) n)

val word4UnaryOp : (bitSequence -> bitSequence) -> word4 -> word4
let word4UnaryOp uniop w = bs_to_w4 (uniop (w4_to_bs w))

val word4ToNat : word4 -> nat
let word4ToNat w = natFromInt (intFromInteger (integerFromBitSeq (w4_to_bs w)) mod 16)
declare isabelle target_rep function word4ToNat = `unat`

val word4ToInt : word4 -> int
let word4ToInt w = intFromInteger (integerFromBitSeq (w4_to_bs w))
declare isabelle target_rep function word4ToInt = `sint`

val word4ToUInt : word4 -> int
let word4ToUInt w = (word4ToInt w) mod 16
declare isabelle target_rep function word4ToUInt = `uint`

declare isabelle target_rep function w4_to_bs = (fun w -> bitSeqFromInteger (Just 4) (integerFromInt (word4ToInt w)))

val word4FromInteger : integer -> word4
let word4FromInteger i = bs_to_w4 (bitSeqFromInteger (Just 4) i)
declare isabelle target_rep function word4FromInteger = (fun i -> `word_of_int` (intFromInteger i))

val word4FromInt : int -> word4
let word4FromInt i = bs_to_w4 (bitSeqFromInteger (Just 4) (integerFromInt i))
declare isabelle target_rep function word4FromInt = `word_of_int`

val word4FromNat : nat -> word4
let word4FromNat i = word4FromInteger (integerFromNat i)

val word4FromNatural : natural -> word4
let word4FromNatural i = word4FromInteger (integerFromNatural i)

val word4FromBoollist : list bool -> word4
let word4FromBoollist lst = match bitSeqFromBoolList (List.reverse lst) with
 | Nothing -> bs_to_w4 0
 | Just a -> bs_to_w4 a
end
declare isabelle target_rep function word4FromBoollist = `of_bl`

val boolListFromWord4 : word4 -> list bool
let boolListFromWord4 w = List.reverse (boolListFrombitSeq 4 (w4_to_bs w))
declare isabelle target_rep function boolListFromWord4 = `to_bl`

val word4FromNumeral : numeral -> word4
let word4FromNumeral w = bs_to_w4 (fromNumeral w)

instance (Numeral word4)
  let fromNumeral = word4FromNumeral
end

val w4Eq : word4 -> word4 -> bool
let w4Eq = unsafe_structural_equality

val w4Less : word4 -> word4 -> bool
let w4Less bs1 bs2 = word4BinTest (<) bs1 bs2

val w4LessEqual : word4 -> word4 -> bool
let w4LessEqual bs1 bs2 = word4BinTest (<=) bs1 bs2

val w4Greater : word4 -> word4 -> bool
let w4Greater bs1 bs2 = word4BinTest (>) bs1 bs2

val w4GreaterEqual : word4 -> word4 -> bool
let w4GreaterEqual bs1 bs2 = word4BinTest (>=) bs1 bs2

val w4Compare : word4 -> word4 -> ordering
let w4Compare bs1 bs2 = word4BinTest compare bs1 bs2

instance (Ord word4)
  let compare = w4Compare
  let (<) = w4Less
  let (<=) = w4LessEqual
  let (>) = w4Greater
  let (>=) = w4GreaterEqual
end

instance (SetType word4)
  let setElemCompare = w4Compare
end

val word4Negate : word4 -> word4
let word4Negate = word4UnaryOp ~

val word4Succ : word4 -> word4
let word4Succ = word4UnaryOp succ

val word4Pred : word4 -> word4
let word4Pred = word4UnaryOp pred

val word4Lnot : word4 -> word4
let word4Lnot = word4UnaryOp lnot

val word4Add : word4 -> word4 -> word4
let word4Add = word4BinOp (+)

val word4Minus : word4 -> word4 -> word4
let word4Minus = word4BinOp (-)

val word4Mult : word4 -> word4 -> word4
let word4Mult = word4BinOp ( * )

val word4IntegerDivision : word4 -> word4 -> word4
let word4IntegerDivision = word4BinOp (/)

val word4Division : word4 -> word4 -> word4
let word4Division = word4BinOp (div)

val word4Remainder : word4 -> word4 -> word4
let word4Remainder = word4BinOp (mod)

val word4Land : word4 -> word4 -> word4
let word4Land = word4BinOp (land)

val word4Lor : word4 -> word4 -> word4
let word4Lor = word4BinOp (lor)

val word4Lxor : word4 -> word4 -> word4
let word4Lxor = word4BinOp (lxor)

val word4Min : word4 -> word4 -> word4
let word4Min = word4BinOp (min)

val word4Max : word4 -> word4 -> word4
let word4Max = word4BinOp (max)

val word4Power : word4 -> nat -> word4
let word4Power = word4NatOp ( ** )

val word4Asr : word4 -> nat -> word4
let word4Asr = word4NatOp (asr)

val word4Lsr : word4 -> nat -> word4
let word4Lsr = word4NatOp (lsr)

val word4Lsl : word4 -> nat -> word4
let word4Lsl = word4NatOp (lsl)

declare isabelle target_rep function word4Lnot w = (`NOT` w)
declare isabelle target_rep function word4Lor = infix `OR`
declare isabelle target_rep function word4Lxor = infix `XOR`
declare isabelle target_rep function word4Land = infix `AND`
declare isabelle target_rep function word4Lsl = infix `<<`
declare isabelle target_rep function word4Lsr = infix `>>`
declare isabelle target_rep function word4Asr = infix `>>>`


instance (NumNegate word4)
  let ~ = word4Negate
end

instance (NumAdd word4)
  let (+) = word4Add
end

instance (NumMinus word4)
  let (-) = word4Minus
end

instance (NumSucc word4)
  let succ = word4Succ
end

instance (NumPred word4)
  let pred = word4Pred
end

instance (NumMult word4)
  let ( * ) = word4Mult
end

instance (NumPow word4)
  let ( ** ) = word4Power
end

instance ( NumIntegerDivision word4) 
  let (div) = word4IntegerDivision
end

instance ( NumDivision word4 ) 
  let (/) = word4Division
end

instance (NumRemainder word4) 
  let (mod) = word4Remainder
end

instance (OrdMaxMin word4) 
  let max = word4Max
  let min = word4Min
end

instance (WordNot word4) 
  let lnot = word4Lnot
end

instance (WordAnd word4) 
  let (land) = word4Land
end

instance (WordOr word4) 
  let (lor) = word4Lor
end

instance (WordXor word4) 
  let (lxor) = word4Lxor
end

instance (WordLsl word4) 
  let (lsl) = word4Lsl
end

instance (WordLsr word4)
  let (lsr) = word4Lsr
end

instance (WordAsr word4)
  let (asr) = word4Asr
end

val word4UGT : word4 -> word4 -> bool
let word4UGT a b = word4ToNat a > word4ToNat b
declare isabelle target_rep function word4UGT = infix `>`

declare isabelle target_rep function word4FromNumeral n = ((`word_of_int` n) : word4)
declare isabelle target_rep function w4Less = `word_sless`
declare isabelle target_rep function w4LessEqual = `word_sle`
declare isabelle target_rep function w4Greater x y = w4Less y x
declare isabelle target_rep function w4GreaterEqual x y = w4LessEqual y x
declare isabelle target_rep function w4Compare = genericCompare w4Less w4Eq

declare isabelle target_rep function word4Negate i = `-` i
declare isabelle target_rep function word4Add = infix `+`
declare isabelle target_rep function word4Minus = infix `-`
declare isabelle target_rep function word4Succ n = n + 1
declare isabelle target_rep function word4Pred n = n - 1
declare isabelle target_rep function word4Mult = infix `*`
declare isabelle target_rep function word4Power = infix `^`
declare isabelle target_rep function word4Division = infix `div`
declare isabelle target_rep function word4IntegerDivision = infix `div`
declare isabelle target_rep function word4Remainder = infix `mod`
declare isabelle target_rep function word4Min = `min`
declare isabelle target_rep function word4Max = `max`

